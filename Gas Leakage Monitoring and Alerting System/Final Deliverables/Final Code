#include <WiFi.h>//library for wifi
#include <PubSubClient.h>//library for MQtt 
//#define TRIG_PIN 13
//#define ECHO_PIN 12 
int sensorThresh=400;



void callback(char* subscribetopic, byte* payload, unsigned int payloadLength); 

//-------credentials of IBM Accounts------

#define ORG "jesccj"//IBM ORGANITION ID
#define DEVICE_TYPE "ESP32_Controller" //Device type mentioned in ibm watson IOT Platform
#define DEVICE_ID "PURNI"//Device ID mentioned in ibm watson IOT Platform
#define TOKEN "*Vzh&EwwgbRpqohJd+"  
   //Token
int analogValue;


//-------- Customise the above values --------
char server[] = ORG ".messaging.internetofthings.ibmcloud.com";// Server Name
char publishTopic[] = "iot-2/evt/Data/fmt/json";// topic name and type of event perform and format in which data to be send
char subscribeTopic[] = "iot-2/cmd/test/fmt/String";// cmd  REPRESENT command type AND COMMAND IS TEST OF FORMAT STRING
char authMethod[] = "use-token-auth";// authentication method
char token[] = TOKEN;
char clientID[] = "d:" ORG ":" DEVICE_TYPE ":" DEVICE_ID;//client id


//-----------------------------------------
WiFiClient wifiClient; // creating the instance for wificlient
PubSubClient client(server, 1883, callback ,wifiClient);  //calling the predefined client id by passing parameter like server id,portand wificredential


void setup()// configureing the ESP32 
{
  Serial.begin(9200);
  //pinMode(TRIG_PIN, OUTPUT);
  //digitalWrite(TRIG_PIN, LOW);
  //pinMode(ECHO_PIN, INPUT);
  
  Serial.println();
  wificonnect();
  mqttconnect();
}

void loop()// Recursive Function
{
  //digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  //digitalWrite(TRIG_PIN, LOW);
  //float distance = 0.017 * duration_us;
  analogValue=random(200,800);
  Serial.print(analogValue);
  if(analogValue>sensorThresh)
  {
    PublishData(analogValue,"ALERT");
  }else{
    PublishData(analogValue,"SAFE");
  }

  delay(1000);
  if (!client.loop()) {
    mqttconnect();
  }
}



//.....................................retrieving to Cloud.............................../

void PublishData(int d,char s[]) {
  mqttconnect();//function call for connecting to ibm
  /*
     creating the String in in form JSon to update the data to ibm cloud
  */
  String payload = "{\"Gas Value\":";
  payload+=d;
  payload+=",";
  payload+="\"MESSAGE\":";
  payload+="\"";
  payload+=s;
  payload+="\"";
  payload+="}";

  
  Serial.print("Sending payload: ");
  Serial.println(payload);

  
  if (client.publish(publishTopic, (char*) payload.c_str())) {
    Serial.println("Publish ok");// if it sucessfully upload data on the cloud then it will print publish ok in Serial monitor or else it will print publish failed
  } else {
    Serial.println("Publish failed");
  }
  
}


void mqttconnect(){
  if(!client.connected()){
    Serial.print("Reconnecting to");
    Serial.println(server);
    while(!!!client.connect(clientID, authMethod, token)){
      Serial.print(".");
      delay(500);
    }
    initManagedDevice();
    Serial.println();
  }
}

void wificonnect(){
  Serial.println();
  Serial.print("Connecting to");

  WiFi.begin("Wokwi-GUEST","",6);
  while(WiFi.status()!=WL_CONNECTED){
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WIFI CONNECTED");
  Serial.println("IP address:");
  Serial.println(WiFi.localIP());
}

void initManagedDevice(){
  if(client.subscribe(subscribeTopic)){
    Serial.println((subscribeTopic));
    Serial.println("subscribe to cmd ok");
  }else{
    Serial.println("subscribe to cmd failed");
  }
}

void callback(char* subscribeTopic, byte* payload, unsigned int payloadLength){
  Serial.print("callback invoked for topic:");
  Serial.println(subscribeTopic);
  for(int i=0; i<payloadLength; i++){
    analogValue += (char)payload[i];
  }
}
